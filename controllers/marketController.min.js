// @ts-nocheck
const axios=require("axios"),Marketlimit=require("../models/Marketlimit"),MarketList=require("../models/Marketlist");exports.getAllLimits=async(e,t)=>{try{const e=await Marketlimit.find().sort({marketType:1});t.status(200).json({message:"Market limits fetched successfully",data:e})}catch(e){t.status(500).json({message:"Failed to fetch market limits",error:e.message})}},exports.createOrUpdateLimit=async(e,t)=>{try{const{marketType:s,minBet:a,maxBet:r,maxProfit:i}=e.body;if(!(s&&a&&r&&i))return t.status(400).json({message:"All fields are required"});const n=await Marketlimit.findOneAndUpdate({marketType:s},{minBet:a,maxBet:r,maxProfit:i},{new:!0,upsert:!0});t.status(200).json({message:"Market limit saved successfully",data:n})}catch(e){t.status(500).json({message:"Failed to save market limit",error:e.message})}},exports.syncMarketList=async(e,t)=>{try{const{eventId:s}=e.params;if(!s)return t.status(400).json({message:"Missing eventId in query params"});const a=await axios.post("https://apidiamond.online/sports/api/market-list",{eventId:s}),r=a.data?.data;if(!Array.isArray(r))return t.status(400).json({message:"Invalid market data received"});let i=0,n=0;for(const e of r){const t=await MarketList.findOne({marketId:e.marketId});await MarketList.findOneAndUpdate({marketId:e.marketId},{$set:e},{new:!0,upsert:!0}),t?n++:i++}t.status(200).json({message:"Market sync completed",inserted:i,updated:n})}catch(e){console.error("Error syncing markets:",e.message),t.status(500).json({message:"Server error",error:e.message})}};