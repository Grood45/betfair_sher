// @ts-nocheck
const axios=require("axios"),Marketlimit=require("../models/Marketlimit"),MarketList=require("../models/Marketlist");exports.getAllLimits=async(t,e)=>{try{const t=await Marketlimit.find().sort({marketType:1});e.status(200).json({message:"Market limits fetched successfully",data:t})}catch(t){e.status(500).json({message:"Failed to fetch market limits",error:t.message})}},exports.createOrUpdateLimit=async(t,e)=>{try{const{marketType:s,minBet:a,maxBet:r,maxProfit:i}=t.body;if(!(s&&a&&r&&i))return e.status(400).json({message:"All fields are required"});const n=await Marketlimit.findOneAndUpdate({marketType:s},{minBet:a,maxBet:r,maxProfit:i},{new:!0,upsert:!0});e.status(200).json({message:"Market limit saved successfully",data:n})}catch(t){e.status(500).json({message:"Failed to save market limit",error:t.message})}},exports.syncMarketList=async(t,e)=>{try{const{eventId:s}=t.params;if(!s)return e.status(400).json({message:"Missing eventId in query params"});const a=await axios.post("https://apidiamond.online/sports/api/market-list",{eventId:s}),r=a.data?.data;if(!Array.isArray(r))return e.status(400).json({message:"Invalid market data received"});let i=0,n=0;for(const t of r){const e=await MarketList.findOne({marketId:t.marketId});await MarketList.findOneAndUpdate({marketId:t.marketId},{$set:t},{new:!0,upsert:!0}),e?n++:i++}e.status(200).json({message:"Market sync completed",inserted:i,updated:n})}catch(t){console.error("Error syncing markets:",t.message),e.status(500).json({message:"Server error",error:t.message})}},exports.getMarketListByEventId=async(t,e)=>{try{const{eventId:s}=t.params;if(!s)return e.status(400).json({message:"Missing eventId in params"});await syncMarketListByEventId(s);const a=await MarketList.find({"event.id":s});e.status(200).json({message:"Market list fetched successfully",total:a.length,data:a})}catch(t){console.error("Error fetching market list:",t.message),e.status(500).json({message:"Server error",error:t.message})}};const syncMarketListByEventId=async t=>{if(!t)throw new Error("Missing eventId");const e=await axios.post("https://apidiamond.online/sports/api/market-list",{eventId:t}),s=e.data?.data;if(!Array.isArray(s))throw new Error("Invalid market data received");let a=0,r=0;for(const t of s){const e=await MarketList.findOne({marketId:t.marketId});await MarketList.findOneAndUpdate({marketId:t.marketId},{$set:t},{new:!0,upsert:!0}),e?r++:a++}return{inserted:a,updated:r}};