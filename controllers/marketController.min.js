// @ts-nocheck
const axios=require("axios"),Marketlimit=require("../models/Marketlimit"),MarketList=require("../models/Marketlist"),ExchangeOdds=require("../models/ExchangeOdds");exports.getAllLimits=async(e,t)=>{try{const e=await Marketlimit.find().sort({marketType:1});t.status(200).json({message:"Market limits fetched successfully",data:e})}catch(e){t.status(500).json({message:"Failed to fetch market limits",error:e.message})}},exports.createOrUpdateLimit=async(e,t)=>{try{const{marketType:s,minBet:a,maxBet:r,maxProfit:n}=e.body;if(!(s&&a&&r&&n))return t.status(400).json({message:"All fields are required"});const d=await Marketlimit.findOneAndUpdate({marketType:s},{minBet:a,maxBet:r,maxProfit:n},{new:!0,upsert:!0});t.status(200).json({message:"Market limit saved successfully",data:d})}catch(e){t.status(500).json({message:"Failed to save market limit",error:e.message})}},exports.getExchangeOddsByEventId=async(e,t)=>{try{const{eventId:s}=e.params;if(!s)return t.status(400).json({message:"Missing eventId in params"});const a=await ExchangeOdds.find({eventId:s});if(!a.length)return t.status(404).json({message:"No exchange odds found for this eventId"});t.status(200).json({message:"Exchange odds fetched successfully",total:a.length,data:a})}catch(e){console.error("Error fetching exchange odds:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.syncMarketList=async(e,t)=>{try{const{eventId:s}=e.params;if(!s)return t.status(400).json({message:"Missing eventId in params"});const a=await syncMarketListByEventId(s),r=(await MarketList.find({"event.id":s},{marketId:1,_id:0})).map((e=>e.marketId)).filter(Boolean);if(0===r.length)return t.status(404).json({message:"No marketIds found after sync"});const n=await axios.get("https://apidiamond.online/sports/api/v1/macthodds/",{params:{ids:r.join(",")}}),d=n.data?.data||[];let i=0,o=0;for(const e of d){const t=await ExchangeOdds.findOne({MarketId:e.MarketId});await ExchangeOdds.findOneAndUpdate({MarketId:e.MarketId},{$set:{MarketId:e.MarketId,eventId:e.eventId,marketName:e.marketName,Status:e.Status,IsInplay:e.IsInplay,updateTime:e.updatetime,sport:e.sport,Runners:e.Runners}},{new:!0,upsert:!0}),t?o++:i++}t.status(200).json({message:"Synced, odds fetched and stored",syncSummary:a,marketIds:r,oddsStored:{inserted:i,updated:o}})}catch(e){console.error("Error fetching market list:",e.message),t.status(500).json({message:"Server error",error:e.message})}};const syncMarketListByEventId=async e=>{if(!e)throw new Error("Missing eventId");const t=await axios.post("https://apidiamond.online/sports/api/market-list",{eventId:e}),s=t.data?.data;if(!Array.isArray(s))throw new Error("Invalid market data received");let a=0,r=0;for(const e of s){const t=await MarketList.findOne({marketId:e.marketId});await MarketList.findOneAndUpdate({marketId:e.marketId},{$set:e},{new:!0,upsert:!0}),t?r++:a++}return{inserted:a,updated:r}};