// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),User=require("../models/User"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path");exports.create=async(e,t)=>{try{const{displayName:r,position:s,provider:o,minBet:a,maxBet:n,bettingStatus:i,sportStatus:p}=e.body;let c="";e.file&&(c=`/uploads/icons/${e.file.filename}`);const d=new Sport({icon:c,displayName:r,position:s,provider:o,minBet:a,maxBet:n,bettingStatus:i,sportStatus:p});await d.save(),t.status(201).json({message:"Sport created successfully",data:d})}catch(e){console.error("Create Sport Error:",e),t.status(500).json({error:"Internal Server Error",msg:e.message})}},exports.update=async(e,t)=>{try{const{id:r}=e.params,{displayName:s,position:o,provider:a,minBet:n,maxBet:i,bettingStatus:p,sportStatus:c}=e.body,d=await Sport.findById(r);if(!d)return t.status(404).json({error:"Sport not found"});let u={};if(e.file){if(d.icon){const e=path.join(__dirname,"..",d.icon);fs.existsSync(e)&&fs.unlinkSync(e)}u.icon=`/uploads/icons/${e.file.filename}`}const l=await Sport.findByIdAndUpdate(r,{displayName:s,position:o,provider:a,minBet:n,maxBet:i,bettingStatus:p,sportStatus:c,...u},{new:!0});t.json({message:"Sport updated successfully",data:l})}catch(e){console.error("Update Sport Error:",e),t.status(500).json({error:"Internal Server Error",msg:e.message})}};