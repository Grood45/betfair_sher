// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),User=require("../models/User"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios");exports.getAll=async(t,e)=>{try{const t=await Sport.aggregate([{$addFields:{sortPriority:{$cond:{if:{$eq:["$position",1]},then:0,else:1}}}},{$sort:{sortPriority:1,position:1,_id:-1}},{$project:{sortPriority:0}}]);e.status(200).json({success:!0,message:"Sports fetched and sorted by position",data:t})}catch(t){console.error("Get All Sports Error:",t),e.status(500).json({success:!1,error:"Internal Server Error",msg:t.message})}},exports.sync=async(t,e)=>{try{const t=await axios.get("https://zplay1.in/sports/api/v1/sports/management/getSport");if(!t.data.success||!Array.isArray(t.data.data))return e.status(400).json({error:"Invalid data from external API"});const s=t.data.data,r=[],a=[];for(const t of s){if(await Sport.findOne({externalId:t.id})){a.push(t.slug);continue}const e=new Sport({externalId:t.id,sportId:t.id,displayName:t.name,position:t.rank||0,provider:t.slug||"default-provider",minBet:0,maxBet:0,bettingStatus:1,sportStatus:1===t.is_custom?"inactive":"active",icon:t.sport_icon||"",banner:t.banner_image||""}),s=await e.save();r.push(s)}return e.status(201).json({message:"Sports synced successfully",addedCount:r.length,skippedCount:a.length,added:r,skipped:a})}catch(t){console.error("Create Sport Error:",t),e.status(500).json({error:"Internal Server Error",msg:t.message})}},exports.create=async(t,e)=>{try{const{displayName:s,position:r,provider:a,minBet:o,maxBet:n,bettingStatus:i,sportStatus:p}=t.body;let c="";t.file&&(c=`/uploads/icons/${t.file.filename}`);const d=new Sport({icon:c,displayName:s,position:r,provider:a,minBet:o,maxBet:n,bettingStatus:i,sportStatus:p});await d.save(),e.status(201).json({message:"Sport created successfully",data:d})}catch(t){console.error("Create Sport Error:",t),e.status(500).json({error:"Internal Server Error",msg:t.message})}},exports.update=async(t,e)=>{try{const{id:s}=t.params,{displayName:r,position:a,provider:o,minBet:n,maxBet:i,bettingStatus:p,sportStatus:c}=t.body,d=await Sport.findById(s);if(!d)return e.status(404).json({error:"Sport not found"});let u={};if(t.file){if(d.icon){const t=path.join(__dirname,"..",d.icon);fs.existsSync(t)&&fs.unlinkSync(t)}u.icon=`/uploads/icons/${t.file.filename}`}const l=await Sport.findByIdAndUpdate(s,{displayName:r,position:a,provider:o,minBet:n,maxBet:i,bettingStatus:p,sportStatus:c,...u},{new:!0});await Match.updateMany({sportId:s},{isBettingEnabled:p},{new:!0}),e.json({message:"Sport updated successfully",data:l})}catch(t){console.error("Update Sport Error:",t),e.status(500).json({error:"Internal Server Error",msg:t.message})}},exports.getAllSportNames=async(t,e)=>{try{const t=await Sport.find({},{displayName:1});return e.status(200).json({message:"Sports fetched successfully",data:t})}catch(t){return console.error("Error fetching sports:",t.message),e.status(500).json({message:"Failed to fetch sports",error:t.message})}};