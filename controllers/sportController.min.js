// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),User=require("../models/User"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios"),moment=require("moment-timezone");exports.getAll=async(t,e)=>{try{const t=await Sport.aggregate([{$addFields:{sortPriority:{$cond:{if:{$eq:["$position",1]},then:0,else:1}}}},{$sort:{sortPriority:1,position:1,_id:-1}},{$project:{sortPriority:0}}]);e.status(200).json({success:!0,message:"Sports fetched and sorted by position",data:t})}catch(t){console.error("Get All Sports Error:",t),e.status(500).json({success:!1,error:"Internal Server Error",msg:t.message})}},exports.sync=async(t,e)=>{try{const t=(await axios.post("https://apidiamond.online/sports/api/v2/api/sport-list")).data;if(!t||"1"!==t.status||!Array.isArray(t.sports))return e.status(400).json({error:"Invalid data from external API"});const r=t.sports,s=[],o=[];for(const t of r){if(await Sport.findOne({$or:[{displayName:t.sportName},{betfairEventTypeId:t.betfairEventTypeId}]})){o.push(t.sportName);continue}const e=new Sport({displayName:t.sportName,sportName:t.sportName,childName:t.childName||"",marketCount:parseInt(t.marketCount||"0"),position:parseInt(t.position||"0"),sportStatus:"active"===t.status?"active":"inactive",bettingEnabled:"true"===t.bettingEnabled,maxBetLimit:parseInt(t.maxBetLimit||"0"),minBetLimit:parseInt(t.minBetLimit||"0"),oddsProvider:t.oddsProvider||"",featured:"1"===t.featured,betfairEventTypeId:t.betfairEventTypeId||"",sportradarSportId:t.sportradarSportId||"",sportId:t.betfairEventTypeId||""}),r=await e.save();s.push(r)}return e.status(201).json({message:"Sports synced successfully",addedCount:s.length,skippedCount:o.length,added:s,skipped:o})}catch(t){console.error("Sync Sports Error:",t),e.status(500).json({error:"Internal Server Error",msg:t.message})}},exports.create=async(t,e)=>{try{const{displayName:r,position:s,provider:o,minBet:a,maxBet:n,bettingStatus:i,sportStatus:p}=t.body;let d="";t.file&&(d=`/uploads/icons/${t.file.filename}`);const c=new Sport({icon:d,displayName:r,position:s,provider:o,minBet:a,maxBet:n,bettingStatus:i,sportStatus:p});await c.save(),e.status(201).json({message:"Sport created successfully",data:c})}catch(t){console.error("Create Sport Error:",t),e.status(500).json({error:"Internal Server Error",msg:t.message})}},exports.update=async(t,e)=>{try{const{id:r}=t.params,{displayName:s,position:o,provider:a,minBet:n,maxBet:i,bettingStatus:p,sportStatus:d}=t.body,c=await Sport.findById(r);if(!c)return e.status(404).json({error:"Sport not found"});let m={};if(t.file){if(c.icon){const t=path.join(__dirname,"..",c.icon);fs.existsSync(t)&&fs.unlinkSync(t)}m.icon=`/uploads/icons/${t.file.filename}`}const u=await Sport.findByIdAndUpdate(r,{displayName:s,sportName:s,position:o,provider:a,minBetLimit:n,maxBetLimit:i,bettingStatus:p,sportStatus:d,...m},{new:!0});await Match.updateMany({sportId:r},{isBettingEnabled:p},{new:!0}),e.json({message:"Sport updated successfully",data:u})}catch(t){console.error("Update Sport Error:",t),e.status(500).json({error:"Internal Server Error",msg:t.message})}},exports.getAllSportNames=async(t,e)=>{try{const t=await Sport.find({},{displayName:1,icon:1,position:1}).sort({position:1}),r=moment().tz("Asia/Kolkata").toDate(),s=await Promise.all(t.map((async t=>{const e=t._id.toString(),s=await Match.find({sportId:e});let o=0,a=0;return s.forEach((t=>{const e=moment(t.event_date);e.isValid()&&(e.isBefore(r)?o++:a++)})),{...t.toObject(),inplayCount:o,upcomingCount:a}})));return e.status(200).json({message:"Sports fetched successfully",data:s})}catch(t){return console.error("Error fetching sports:",t.message),e.status(500).json({message:"Failed to fetch sports",error:t.message})}};