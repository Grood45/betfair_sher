// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),cookieOptions={httpOnly:!0,secure:!0,sameSite:"Strict"};exports.create=async(r,e)=>{const{username:s,password:t,confirmPassword:a,creatorId:o}=r.body;try{if(!s||!t||!a)return e.status(400).json({error:"All fields are required"});if(t!==a)return e.status(400).json({error:"Passwords do not match"});if(await User.findOne({username:s}))return e.status(400).json({error:"Username already exists"});const r=await bcrypt.hash(t,10),n=new User({username:s,password:r,role:"staff",creatorId:o,status:1});await n.save(),e.status(201).json({message:"Worker created successful",data:n})}catch(r){console.error(r),e.status(500).json({error:"Internal Server Error"})}},exports.updateWorker=async(r,e)=>{const{id:s}=r.params,{username:t,password:a,confirmPassword:o}=r.body;try{const r=await User.findById(s);if(!r||"staff"!==r.role)return e.status(404).json({error:"Worker not found"});if(t){if(await User.findOne({username:t,_id:{$ne:s}}))return e.status(400).json({error:"Username already exists"});r.username=t}if(a||o){if(a!==o)return e.status(400).json({error:"Passwords do not match"});r.password=await bcrypt.hash(a,10)}r.role="staff",await r.save(),e.status(200).json({message:"Worker updated successfully",data:r})}catch(r){console.error(r),e.status(500).json({error:"Internal Server Error"})}},exports.getWorkerById=async(r,e)=>{const{id:s}=r.params;try{const r=await User.findById(s).select("-password");if(!r||"staff"!==r.role)return e.status(404).json({error:"Worker not found"});e.status(200).json({message:"Worker fetched successfully",data:r})}catch(r){console.error(r),e.status(500).json({error:"Internal Server Error"})}},exports.getAllWorkers=async(r,e)=>{try{const{creatorId:s}=r.params;if(!s)return e.status(400).json({error:"creatorId is required"});const t=await User.find({role:"staff",creatorId:s}).select("-password");e.status(200).json({message:"Workers fetched successfully",data:t})}catch(r){console.error(r),e.status(500).json({error:"Internal Server Error"})}},exports.delete=async(r,e)=>{const{id:s}=r.params;try{const r=await User.findById(s);if(!r||"staff"!==r.role)return e.status(404).json({error:"Worker not found"});await User.findByIdAndDelete(s),e.status(200).json({message:"Worker deleted successfully"})}catch(r){console.error(r),e.status(500).json({error:"Internal Server Error"})}};