// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),cookieOptions={httpOnly:!0,secure:!0,sameSite:"Strict"};exports.create=async(r,s)=>{const{username:e,password:t,confirmPassword:a,creatorId:o}=r.body;try{if(!e||!t||!a)return s.status(400).json({error:"All fields are required"});if(t!==a)return s.status(400).json({error:"Passwords do not match"});if(await User.findOne({username:e}))return s.status(400).json({error:"Username already exists"});const r=await bcrypt.hash(t,10),n=new User({username:e,password:r,role:"staff",creatorId:o,status:1});await n.save(),s.status(201).json({message:"Worker created successful",data:n})}catch(r){console.error(r),s.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.updateWorker=async(r,s)=>{const{id:e}=r.params,{username:t,password:a,confirmPassword:o}=r.body;try{const r=await User.findById(e);if(!r||"staff"!==r.role)return s.status(404).json({error:"Worker not found"});if(t){if(await User.findOne({username:t,_id:{$ne:e}}))return s.status(400).json({error:"Username already exists"});r.username=t}if(a||o){if(a!==o)return s.status(400).json({error:"Passwords do not match"});r.password=await bcrypt.hash(a,10)}r.role="staff",await r.save(),s.status(200).json({message:"Worker updated successfully",data:r})}catch(r){console.error(r),s.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.getWorkerById=async(r,s)=>{const{id:e}=r.params;try{const r=await User.findById(e).select("-password");if(!r||"staff"!==r.role)return s.status(404).json({error:"Worker not found"});s.status(200).json({message:"Worker fetched successfully",data:r})}catch(r){console.error(r),s.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.getAllWorkers=async(r,s)=>{try{const{creatorId:e}=r.params;if(!e)return s.status(400).json({error:"creatorId is required"});const t=await User.find({role:"staff",creatorId:e}).select("-password");s.status(200).json({message:"Workers fetched successfully",data:t})}catch(r){console.error(r),s.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.changePassword=async(r,s)=>{try{const{id:e}=r.params,{password:t,confirmPassword:a}=r.body;if(!t||!a)return s.status(400).json({error:"Password and confirm password are required"});if(t!==a)return s.status(400).json({error:"Passwords do not match"});const o=await User.findById(e);if(!o)return s.status(404).json({error:"Partner not found"});const n=await bcrypt.genSalt(10);o.password=await bcrypt.hash(t,n),await o.save(),s.status(200).json({message:"Password updated successfully"})}catch(r){console.error("Error changing password:",r),s.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.delete=async(r,s)=>{const{id:e}=r.params;try{const r=await User.findById(e);if(!r||"staff"!==r.role)return s.status(404).json({error:"Worker not found"});await User.findByIdAndDelete(e),s.status(200).json({message:"Worker deleted successfully"})}catch(r){console.error(r),s.status(500).json({error:"Internal Server Error",msg:r.message})}};