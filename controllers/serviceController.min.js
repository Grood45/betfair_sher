// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),Role=require("../models/Role"),axios=require("axios"),Sport=require("../models/Sport"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),EventList=require("../models/EventList"),mongoose=require("mongoose"),SpotRadarEvent=require("../models/SpotRadarEvent");exports.sportList=async(e,t)=>{try{const e=await Sport.find().sort({position:1});return t.status(200).json({message:"All sports fetched successfully",data:e})}catch(e){return console.error("Error fetching sports:",e.message),t.status(500).json({message:"Failed to fetch sports",error:e.message})}},exports.getEvents=async(e,t)=>{try{const{fastOddsId:s}=e.params;if(!s||!mongoose.Types.ObjectId.isValid(s))return t.status(400).json({message:"Valid fastOddsId parameter is required."});const r=new mongoose.Types.ObjectId(s),o=await EventList.findOne({FastoddsId:r}).sort({timestamp:-1}),a=await SpotRadarEvent.findOne({FastoddsId:r});if(!o||!a)return t.status(404).json({message:"Event data not found for the provided FastoddsId."});const n=o.betfairEventList.events||[],d=a.spotradardeventlist||[],i=e=>e.toLowerCase().replace(/[@]/g,"vs").replace(/[^a-z0-9\s]/gi,"").split(/vs|\bat\b/).map((e=>e.trim())).sort().join(" vs "),c=new Set,p=n.map((e=>{const t=i(e.name||"");console.log(`normalizedBetfairName: "${t}"`);let s=null;for(const r of d){const o=i(r.eventName||"");if(console.log(`🟡 Comparing:\n  Betfair: "${e.name}" → "${t}"\n  Sportradar: "${r.eventName}" → "${o}"`),t===o){console.log(`✅ Matched: "${e.name}" == "${r.eventName}"`),s=r,c.add(r.eventId);break}}return{event_name:e.name,betfair_event_id:e.event_id,betfair_sport_id:e.sportId,spotradarSportId:s?.sportId||0,spotradarEventId:s?.eventId||0,...e}})),m=d.filter((e=>!c.has(e.eventId))).map((e=>({event_name:e.eventName,betfair_event_id:0,betfair_sport_id:0,spotradarSportId:e.sportId,spotradarEventId:e.eventId,sportradarEventDetails:e}))),l=[...p,...m];return t.status(200).json({message:"Events fetched and enriched successfully.",data:l})}catch(e){return console.error("❌ Error fetching events:",e),t.status(500).json({message:"Failed to fetch events.",error:e.message})}};