// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),Role=require("../models/Role"),axios=require("axios"),Sport=require("../models/Sport"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),EventList=require("../models/EventList"),mongoose=require("mongoose"),SpotRadarEvent=require("../models/SpotRadarEvent");exports.sportList=async(e,s)=>{try{const e=await Sport.find().sort({position:1});return s.status(200).json({message:"All sports fetched successfully",data:e})}catch(e){return console.error("Error fetching sports:",e.message),s.status(500).json({message:"Failed to fetch sports",error:e.message})}},exports.getEvents=async(e,s)=>{try{const{fastOddsId:t}=e.params;if(!t)return s.status(400).json({message:"fastOddsId parameter is required."});if(!mongoose.Types.ObjectId.isValid(t))return s.status(400).json({message:"Invalid fastOddsId format."});const r=new mongoose.Types.ObjectId(t),o=await EventList.findOne({FastoddsId:r}).sort({timestamp:-1}),a=await SpotRadarEvent.findOne({FastoddsId:r});if(!o||!a)return s.status(404).json({message:"Event data not found for the provided FastoddsId."});const n=o.betfairEventList.events||[],d=a.spotradarEventList||[],i=n.map((e=>{const s=d.find((s=>s.eventName?.trim().toLowerCase()===e.name?.trim().toLowerCase()));return s?{...e,spotradarSportId:s.sportId,spotradarEventId:s.eventId}:e}));return s.status(200).json({message:"Events fetched and enriched successfully.",data:i})}catch(e){return console.error("Error fetching events:",e.message),s.status(500).json({message:"Failed to fetch events.",error:e.message})}};