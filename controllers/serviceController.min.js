// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),Role=require("../models/Role"),axios=require("axios"),Sport=require("../models/Sport"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),EventList=require("../models/EventList"),mongoose=require("mongoose"),SpotRadarEvent=require("../models/SpotRadarEvent"),BetfairMarketlist=require("../models/BetfairMarketlist"),BetfairMarketOdds=require("../models/BetfairMarketOdds");exports.sportList=async(e,t)=>{try{const e=await Sport.find().sort({position:1});return t.status(200).json({message:"All sports fetched successfully",data:e})}catch(e){return console.error("Error fetching sports:",e.message),t.status(500).json({message:"Failed to fetch sports",error:e.message})}},exports.getEvents=async(e,t)=>{try{const{fastOddsId:s}=e.params;if(!s||!mongoose.Types.ObjectId.isValid(s))return t.status(400).json({message:"Valid fastOddsId parameter is required."});const r=new mongoose.Types.ObjectId(s),a=await EventList.findOne({FastoddsId:r}).sort({timestamp:-1}),o=await SpotRadarEvent.findOne({FastoddsId:r});if(!a||!o)return t.status(404).json({message:"Event data not found for the provided FastoddsId."});const n=a.betfairEventList.events||[],d=o.spotradardeventlist||[],i=e=>{if(!e)return"";return e.toLowerCase().replace(/[@]| at | v[.]?s?[.]? | vs[.]?/gi," vs ").replace(/[^a-z0-9\s]/gi,"").split("vs").map((e=>e.trim())).sort().join(" vs ")},c=new Set,u=n.map((e=>{const t=i(e.name||"");console.log(`normalizedBetfairName: "${t}"`);let s=null;for(const r of d){const a=i(r.eventName||"");if(console.log(`🟡 Comparing:\n  Betfair: "${e.name}" → "${t}"\n  Sportradar: "${r.eventName}" → "${a}"`),t===a){console.log(`✅ Matched: "${r.eventId}" -- ${e.name}" == "${r.eventName}"`),s=r,c.add(r.eventId);break}}return{event_name:e.name,event_date:e.event_date,status:s?.status||0,betfair_event_id:e.event_id,betfair_sport_id:e.sportId,spotradarSportId:s?.sportId||0,spotradarEventId:s?.eventId||0,...e,sportradarEventDetails:s||0}})),p=d.filter((e=>!c.has(e.eventId))).map((e=>({event_name:e.eventName,event_date:new Date(e.openDate).toISOString(),status:e.status,betfair_event_id:0,betfair_sport_id:0,spotradarSportId:e.sportId,spotradarEventId:e.eventId,isFancy:"",isBM:"",isPremium:"",score:!0,tv:!1,position:1,sportradarEventDetails:e}))),m=[...u,...p];return t.status(200).json({message:"Events fetched and enriched successfully.",data:m})}catch(e){return console.error("❌ Error fetching events:",e),t.status(500).json({message:"Failed to fetch events.",error:e.message})}},exports.getBetfairMarketByEventsId=async(e,t)=>{try{const{sportId:s,eventId:r}=e.params;if(!s||!r)return t.status(400).json({status:0,message:"Missing sportId or eventId"});const a=await BetfairMarketlist.findOne({FastoddsId:s,betfair_event_id:r});return a?t.status(200).json({status:1,FastoddsId:a.FastoddsId,sportId:s,eventId:r,marketList:a.marketList}):t.status(404).json({status:0,message:"No market data found for the given sportId and eventId"})}catch(e){return console.error("Error in getBetfairMarketByEventsId:",e),t.status(500).json({success:!1,message:"Internal server error"})}},exports.getBetfairMarketOddsByEventsId=async(e,t)=>{try{const{sportId:s,eventId:r}=e.params;if(!s||!r)return t.status(400).json({status:0,message:"Missing sportId or eventId"});const a=await BetfairMarketOdds.find({betfair_event_id:r,FastoddsId:s});return a&&0!==a.length?t.status(200).json({status:1,message:"Market odds found for this event and sport",FastoddsId:s,eventId:r,odds:a}):t.status(404).json({status:0,message:"No odds found for this event and sport"})}catch(e){return console.error("Error in getBetfairMarketOddsByEventsId:",e),t.status(500).json({status:0,message:"Internal server error"})}},exports.liveBetfairMarketsOddsByParams=async(e,t)=>{try{const{sportId:s,eventId:r}=e.params;if(!s||!r)return t.status(400).json({error:"sportId and eventId are required in params"});const a=await BetfairMarketlist.find({betfair_event_id:r});if(!a.length)return t.status(404).json({error:"No market records found for the given eventId"});const o=a.map((e=>e.marketList?.[0]?.marketId)).filter(Boolean);if(!o.length)return t.status(404).json({error:"No valid marketIds found in market records"});const n=o.join(",");console.log("Sending marketIds:",n);const d=await axios.post("https://exchmarket.net/exchangeapi/sports/directmarketsbook",n,{headers:{"Content-Type":"application/json"}}),i=d.data?.result||[];t.status(200).json({status:1,marketCount:o.length,result:i})}catch(e){console.error("Error fetching market odds:",e.message),t.status(500).json({error:e.message})}},exports.getBetfairResultMarketBook=async(e,t)=>{const{marketId:s}=e.params;if(!s)return t.status(400).json({error:"marketId is required"});try{const e=await axios.post("https://api.betfair.com/exchange/betting/json-rpc/v1",[{jsonrpc:"2.0",method:"SportsAPING/v1.0/listMarketBook",params:{marketIds:[s],priceProjection:{priceData:["EX_BEST_OFFERS"],virtualise:!0,rolloverStakes:!0}},id:1}],{headers:{"X-Application":"fslpapQyGZSmkZW3","X-Authentication":"ytglt106htQTwlgyxRksgBdgaMWY3OThxcPd/VSbhes=","Content-Type":"application/json"}});t.status(200).json({success:!0,data:e.data})}catch(e){console.error("Error fetching market book:",e.message),t.status(e.response?.status||500).json({success:!1,message:e.message,data:e.response?.data||null})}};