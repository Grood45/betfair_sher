// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../../models/Sport"),Match=require("../../models/Match"),PremiumEvent=require("../../models/PremiumEvent"),fs=require("fs"),path=require("path"),axios=require("axios"),moment=require("moment-timezone"),mongoose=require("mongoose"),currentIST=moment().tz("Asia/Kolkata").toDate();exports.getAllSportNames=async(t,e)=>{try{const t=await Sport.find({},{displayName:1,icon:1,position:1}).sort({position:1}),s=moment().tz("Asia/Kolkata").toDate(),a=await Promise.all(t.map((async t=>{const e=t._id.toString(),a=await Match.find({sportId:e});let o=0,r=0;return a.forEach((t=>{const e=moment(t.event_date);e.isValid()&&(e.isBefore(s)?o++:r++)})),{...t.toObject(),inplayCount:o,upcomingCount:r}})));return e.status(200).json({message:"Sports fetched successfully",data:a})}catch(t){return console.error("Error fetching sports:",t.message),e.status(500).json({message:"Failed to fetch sports",error:t.message})}},exports.getInplayMatches=async(t,e)=>{try{const{sportName:s,sportId:a}=t.params,o={time:{$lte:currentIST}};if(s&&(o.sport_name=s),a&&(o.sportId=a),!mongoose.Types.ObjectId.isValid(a))return e.status(400).json({message:"Invalid sportId"});const r=await Match.find({sportId:a});e.status(200).json({message:"In-play matches fetched successfully",count:r.length,data:r})}catch(t){console.error("Error fetching in-play matches:",t),e.status(500).json({message:"Failed to fetch matches",error:t.message})}},exports.getInplayFancy=async(t,e)=>{try{const{sportName:s,sportId:a}=t.params,o={time:{$lte:currentIST}};if(s&&(o.sport_name=s),a&&(o.sportId=a),!mongoose.Types.ObjectId.isValid(a))return e.status(400).json({message:"Invalid sportId"});const r=await Match.find({sportId:a});e.status(200).json({message:"In-play matches fetched successfully",count:r.length,data:r})}catch(t){console.error("Error fetching in-play matches:",t),e.status(500).json({message:"Failed to fetch matches",error:t.message})}},exports.getInplayPremium=async(t,e)=>{try{const{sportName:s,sportId:a}=t.params,o={time:{$lte:currentIST}};if(s&&(o.sport_name=s),a&&(o.sportId=a),!mongoose.Types.ObjectId.isValid(a))return e.status(400).json({message:"Invalid sportId"});const r=await Match.find({sportId:a});e.status(200).json({message:"In-play matches fetched successfully",count:r.length,data:r})}catch(t){console.error("Error fetching in-play matches:",t),e.status(500).json({message:"Failed to fetch matches",error:t.message})}};