// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../../models/Sport"),Match=require("../../models/Match"),PremiumEvent=require("../../models/PremiumEvent"),ExchangeOdds=require("../../models/ExchangeOdds"),fs=require("fs"),path=require("path"),axios=require("axios"),moment=require("moment-timezone"),mongoose=require("mongoose"),currentIST=moment().tz("Asia/Kolkata").toDate();exports.getAllSportNames=async(e,t)=>{try{const e=await Sport.find({},{displayName:1,icon:1,position:1}).sort({position:1}),s=moment().tz("Asia/Kolkata").toDate(),a=await Promise.all(e.map((async e=>{const t=e._id.toString(),a=await Match.find({sportId:t});let o=0,r=0;return a.forEach((e=>{const t=moment(e.event_date);t.isValid()&&(t.isBefore(s)?o++:r++)})),{...e.toObject(),inplayCount:o,upcomingCount:r}})));return t.status(200).json({message:"Sports fetched successfully",data:a})}catch(e){return console.error("Error fetching sports:",e.message),t.status(500).json({message:"Failed to fetch sports",error:e.message})}},exports.getInplayMatches=async(e,t)=>{try{const{sportName:s,sportId:a}=e.params;if(a&&!mongoose.Types.ObjectId.isValid(a))return t.status(400).json({message:"Invalid sportId"});let o={};s&&(o.sport_name=s),a&&(o.sportId=a);const r=await Match.find(o).lean(),n=r.map((e=>e.eventId)),c=await ExchangeOdds.find({eventId:{$in:n}}).lean(),i={};for(const e of c)i[e.eventId]||(i[e.eventId]=[]),i[e.eventId].push(e);const m=r.map((e=>({...e,matchOdds:i[e.eventId]||[]})));t.status(200).json({message:"In-play matches fetched successfully",count:m.length,data:m})}catch(e){console.error("Error fetching in-play matches:",e),t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.getInplayFancy=async(e,t)=>{try{const{sportName:s,sportId:a}=e.params,o={time:{$lte:currentIST}};if(s&&(o.sport_name=s),a&&(o.sportId=a),!mongoose.Types.ObjectId.isValid(a))return t.status(400).json({message:"Invalid sportId"});const r=await Match.find({sportId:a});t.status(200).json({message:"In-play matches fetched successfully",count:r.length,data:r})}catch(e){console.error("Error fetching in-play matches:",e),t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.getInplayPremium=async(e,t)=>{try{const{sportName:s,sportId:a}=e.params,o={time:{$lte:currentIST}};if(s&&(o.sport_name=s),a&&(o.sportId=a),!mongoose.Types.ObjectId.isValid(a))return t.status(400).json({message:"Invalid sportId"});const r=await Match.find({sportId:a});t.status(200).json({message:"In-play matches fetched successfully",count:r.length,data:r})}catch(e){console.error("Error fetching in-play matches:",e),t.status(500).json({message:"Failed to fetch matches",error:e.message})}};