// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),Role=require("../models/Role"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),LoginHistory=require("../models/loginHistory");exports.registerPage=(e,s)=>{s.render("auth/register")},exports.signUp=async(e,s)=>{const{username:r,password:o,name:t,mobile:n,role:a}=e.body;try{if(await User.findOne({username:r}))return s.status(400).json({error:"Username already exists"});const e=await bcrypt.hash(o,10),u=new User({username:r,password:e,name:t||null,mobile:n||null,role:a||"user",status:1});await u.save();const i=generateAccessToken({id:u._id}),c=generateRefreshToken({id:u._id});s.status(201).json({message:"Signup successful",username:u.username,role:u.role,accessToken:i,refreshToken:c})}catch(e){console.error(e),s.status(500).json({error:"Internal Server Error",msg:e.message})}},exports.loginPage=(e,s)=>{s.render("auth/login")},exports.loginUser=async(e,s)=>{const{login:r,password:o}=e.body;try{const t=await User.findOne({$or:[{username:r},{mobile:r}]});if(!t)return s.status(400).json({error:"User not found"});if(!await bcrypt.compare(o,t.password))return s.status(400).json({error:"Invalid password"});const n={id:t._id,role:t.role,username:t.username},a=generateAccessToken(n),u=generateRefreshToken(n),i=e.ip||e.connection.remoteAddress,c=e.headers["user-agent"];await LoginHistory.create({userId:t._id,ipAddress:i,browser:c});s.status(200).json({message:"Login successful",username:t.username,_id:t._id,role:t.role,accessToken:a,refreshToken:u})}catch(e){console.error(e),s.status(500).json({error:"Server error"})}},exports.refreshToken=(e,s)=>{const{refreshToken:r}=e.body;if(!r)return s.status(401).json({message:"No refresh token provided"});try{const e=jwt.verify(r,process.env.JWT_REFRESH_SECRET),o=generateAccessToken({id:e.id});s.status(200).json({accessToken:o})}catch(e){return console.error("Refresh token error:",e),s.status(403).json({message:"Invalid or expired refresh token"})}},exports.logout=async(e,s)=>{const r=e.user.id,o=await LoginHistory.findOne({userId:r}).sort({loginDate:-1});o&&(o.logoutDate=new Date,await o.save()),s.status(200).json({message:"Logged out successfully"})},exports.getLoginHistory=async(e,s)=>{try{const r=e.userId;if(!r)return s.status(400).json({error:"userId is required"});const o=await LoginHistory.find({userId:r}).sort({loginDate:-1});s.status(200).json({message:"Login history fetched successfully",data:o})}catch(e){console.error("Error fetching login history:",e),s.status(500).json({error:"Internal Server Error",msg:e.message})}},exports.createRole=async(e,s)=>{try{const{staffId:r,roleName:o,menus:t}=e.body;if(!r||!o||!Array.isArray(t))return s.status(400).json({message:"staffId, roleName, and menus[] are required"});if(!e.user||"superadmin"!==e.user.role)return s.status(403).json({message:"Only superadmin can assign roles"});const n=await User.findById(r);return n?(n.role=o,n.customMenus=t,n.creatorId||(n.creatorId=e.user.id),await n.save(),s.status(200).json({message:"Role and menus assigned to staff",user:{_id:n._id,name:n.name,role:n.role,customMenus:n.customMenus}})):s.status(404).json({message:"Staff user not found"})}catch(e){return console.error("Assign role error:",e),s.status(500).json({message:"Internal server error",error:e.message})}},exports.getUserProfile=async(e,s)=>{try{const r=e.userId;if(!r)return s.status(400).json({error:"User ID is required"});const o=await User.findById(r).select("-password");if(!o)return s.status(404).json({error:"User not found"});s.status(200).json({message:"User profile fetched successfully",data:o})}catch(e){console.error("Error fetching user profile:",e),s.status(500).json({error:"Internal Server Error",msg:e.message})}},exports.getMenusByStaffId=async(e,s)=>{try{const{id:r}=e.params,o=await User.findById(r).select("customMenus name role");return o?s.status(200).json({message:"Menus fetched successfully",staffId:o._id,name:o.name,role:o.role,menus:o.customMenus||[]}):s.status(404).json({message:"Staff user not found"})}catch(e){return console.error("Get menus error:",e.message),s.status(500).json({message:"Internal server error",error:e.message})}};