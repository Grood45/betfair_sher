// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),scoreAPI=require("../models/scoreAPI"),User=require("../models/User"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt");exports.create=async(e,r)=>{try{const{apiName:t,category:s,codeType:o,apiUrl:a,status:n}=e.body,c=new scoreAPI({apiName:t,category:s,codeType:o,apiUrl:a,status:n||"active"});await c.save(),r.status(201).json({message:"API created successfully",data:c})}catch(e){console.error("Error creating Score API:",e),r.status(500).json({error:"Internal Server Error"})}},exports.update=async(e,r)=>{try{const{apiName:t,category:s,codeType:o,apiUrl:a,status:n}=e.body,c=await scoreAPI.findByIdAndUpdate(e.params.id,{apiName:t,category:s,codeType:o,apiUrl:a,status:n,updatedAt:new Date},{new:!0});if(!c)return r.status(404).json({error:"API not found"});r.json({message:"API updated successfully",data:c})}catch(e){console.error("Error updating Score API:",e),r.status(500).json({error:"Internal Server Error"})}},exports.getAll=async(e,r)=>{try{const e=await scoreAPI.find().sort({createdAt:-1}),t=e.length,s=e.filter((e=>"active"===e.status)).length,o=e.filter((e=>"inactive"===e.status)).length,a=e.filter((e=>"suspended"===e.status)).length,n=e.filter((e=>"TV"===e.category)).length,c=e.filter((e=>"Score"===e.category)).length;r.json({totalCount:t,activeCount:s,inactiveCount:o,suspendedCount:a,categoryCounts:{TV:n,Score:c},data:e})}catch(e){console.error("Error fetching Score APIs:",e),r.status(500).json({error:"Internal Server Error"})}},exports.getById=async(e,r)=>{try{const t=await scoreAPI.findById(e.params.id);if(!t)return r.status(404).json({error:"API not found"});r.json({data:t})}catch(e){console.error("Error fetching Score API by ID:",e),r.status(500).json({error:"Internal Server Error"})}};