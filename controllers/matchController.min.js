// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios");exports.syncAllMatches=async(e,t)=>{try{const e=await Sport.find({betfairEventTypeId:{$ne:null}}).select("_id betfairEventTypeId");if(!e||0===e.length)return t.status(404).json({message:"No sports found with betfairEventTypeId"});let s=0,a=0;for(const t of e){const e=t.betfairEventTypeId,r=`https://apidiamond.online/sports/api/listGames/${e}/1`;try{const n=await axios.get(r),o=n.data?.result||n.data?.data;if(!Array.isArray(o)){console.warn(`Invalid match data for sportId ${e}`),console.log("Raw response:",n.data);continue}const i=o.filter((e=>e.event_id)),c=await Match.find({eventId:{$in:i.map((e=>e.event_id))}}).select("eventId"),d=new Set(c.map((e=>e.eventId))),l=i.filter((e=>!d.has(e.event_id))).map((s=>({...s,eventId:s.event_id,sport_id:e,sportId:t._id,betfair_event_id:e})));l.length>0&&await Match.insertMany(l),s+=l.length,a+=d.size}catch(t){console.error(`Failed syncing sportId ${e}:`,t.message);continue}}return t.status(200).json({message:"Sync completed",totalInserted:s,totalSkipped:a})}catch(e){console.error("Sync error:",e.message),t.status(500).json({message:"Failed to sync matches for all sports",error:e.message})}},exports.getMatchesBySportId=async(e,t)=>{try{const{sportId:s}=e.params,a=await Match.find({sportId:parseInt(s)}).sort({startTime:1});t.status(200).json(a)}catch(e){t.status(500).json({message:"Error fetching matches",error:e.message})}},exports.getAllMatches=async(e,t)=>{try{const s=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||20,r=(s-1)*a,n=await Match.find().sort({_id:1}).skip(r).limit(a),o=await Match.countDocuments();t.status(200).json({page:s,limit:a,total:o,totalPages:Math.ceil(o/a),matches:n})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.toggleBetting=async(e,t)=>{try{const{id:s}=e.params,{isBettingEnabled:a}=e.body;if("boolean"!=typeof a)return t.status(400).json({message:"isBettingEnabled must be true or false"});const r=await Match.findByIdAndUpdate(s,{isBettingEnabled:a},{new:!0});if(!r)return t.status(404).json({message:"Match not found"});t.status(200).json({message:"Betting has been "+(a?"enabled":"disabled"),match:r})}catch(e){console.error("Toggle betting error:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.getEventSummary=async(e,t)=>{try{const e=await Match.countDocuments(),s=await Match.countDocuments({$or:[{isMatchLive:!0},{is_in_play:!0}]}),a=e-s,r=await Match.countDocuments({market_internal_id:{$ne:null}}),n=(await Match.distinct("providerId")).length;return t.status(200).json({message:"Event summary fetched successfully",data:{totalEvents:e,liveEvents:s,upcomingEvents:a,activeMarkets:r,providers:n}})}catch(e){return console.error("Error in event summary:",e.message),t.status(500).json({message:"Failed to fetch event summary",error:e.message})}},exports.getAllMatchesBySportId=async(e,t)=>{try{const s=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||20,r=e.params.sportId;console.log(r);const n=(s-1)*a,o={};r&&(o.sportId=r);const i=await Match.find(o).sort({_id:1}).skip(n).limit(a),c=await Match.countDocuments(o);t.status(200).json({page:s,limit:a,total:c,totalPages:Math.ceil(c/a),matches:i})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}};