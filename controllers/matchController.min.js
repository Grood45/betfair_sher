// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios"),moment=require("moment-timezone"),deepEqual=require("fast-deep-equal"),PremiumEvent=require("../models/PremiumEvent"),currentISTTime=moment().tz("Asia/Kolkata").toDate();exports.syncAllMatches=async(e,t)=>{try{const e=await Sport.find({betfairEventTypeId:{$ne:null}}).select("_id betfairEventTypeId");if(!e.length)return t.status(404).json({message:"No sports with betfairEventTypeId"});let s=0,a=0,r=0,o=0;const n=[],i=[],d=[],m={};for(const t of e){const e=t.betfairEventTypeId,o=`https://apidiamond.online/sports/api/final-event-sport-list/${e}`;try{const{data:n}=await axios.get(o),i=n?.sports||n?.result;if(!Array.isArray(i)){console.warn(`Invalid data for sportId ${e}`);continue}r+=i.length;const c=[];for(const s of i){const a=s.event_id||s.eventId;if(!a)continue;const r=s.sportrader_eventName||s.event_name||"";d.push({eventId:a,eventName:r}),m[a]=s;let o=[];s.match_odds_market&&(Array.isArray(s.match_odds_market)?o=s.match_odds_market:"object"==typeof s.match_odds_market&&(o=[s.match_odds_market]));const n={eventId:a,betfair_event_id:s.betfair_event_id||a,sportradar_event_id:s.sportradar_event_id||"",sky_event_id:s.sky_event_id||"",betfair_sport_id:s.betfair_sport_id||"",sport_name:s.sport_name||"",sportradar_sport_id:s.sportradar_sport_id||"",betfair_competition_id:s.betfair_competition_id||"",competition_name:s.competition_name||"",sportradar_competition_id:s.sportradar_competition_id||"",sportrader_compitionname:s.sportrader_compitionname||"",sportrader_eventName:r,betfair_competitionRegion:s.betfair_competitionRegion||"",event_name:r,event_timezone:s.event_timezone||"",event_date:s.event_date||"",event_date_ist_formatted:s.event_date_ist_formatted||"",is_in_play:s.is_in_play||"",status:s.status||"",isFancy:!0===s.isFancy||"1"==s.is_fancy,isBm:!0===s.isBm||"1"==s.isbm,isPremium:!0===s.isPremium||"1"==s.is_premium,sportsName:s.sport_name||"",competitionName:s.competition_name||"",totalMatched:Number(s.total_matched||0),is_fancy:s.is_fancy||"",isbm:s.isbm||"",is_premium:s.is_premium||"",scoure_card:s.scoure_card||"",accept_any_odds:s.accept_any_odds||"",Sportrader_market_id:s.Sportrader_market_id||"",betfair_event_marketCount:s.betfair_event_marketCount||"",min_stake:s.min_stake||"",max_stake:s.max_stake||"",odd_limit:s.odd_limit||"",bet_delay:s.bet_delay||"",port:s.port||"",live_tv_id:s.live_tv_id||"",score_card_id:s.score_card_id||"",sportrader_card_id:s.sportrader_card_id||"",match_odds_market:o,sport_id:e,sportId:t._id};c.push({updateOne:{filter:{eventId:a},update:{$set:n},upsert:!0}})}if(c.length){const e=await Match.bulkWrite(c,{ordered:!1});s+=e.upsertedCount||0,a+=e.modifiedCount||0}}catch(t){console.error(`Sync error for sportId ${e}:`,t.message);continue}}const c=await Match.find({eventId:{$in:Object.keys(m)}},{eventId:1}).lean(),p=new Set(c.map((e=>e.eventId))),u=Object.keys(m).filter((e=>!p.has(e))).map((e=>{const t=m[e];return{eventId:e,eventName:t.sportrader_eventName||t.event_name}}));t.status(200).json({message:"Sync completed (insert or update)",totalFetched:r,totalInserted:s,totalUpdated:a,totalFailed:o,duplicates:i,failedMatches:n,allEventIds:d,notInserted:u})}catch(e){console.error("Global sync error:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.getMatchesBySportId=async(e,t)=>{try{const{sportId:s}=e.params,a=await Match.find({sportId:parseInt(s)}).sort({startTime:1});t.status(200).json(a)}catch(e){t.status(500).json({message:"Error fetching matches",error:e.message})}},exports.getAllMatches=async(e,t)=>{try{const s=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||20,r=(s-1)*a,o=await Match.find().sort({_id:1}).skip(r).limit(a),n=await Match.countDocuments();t.status(200).json({page:s,limit:a,total:n,totalPages:Math.ceil(n/a),matches:o})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.toggleBetting=async(e,t)=>{try{const{id:s}=e.params,{isBettingEnabled:a}=e.body;if("boolean"!=typeof a)return t.status(400).json({message:"isBettingEnabled must be true or false"});const r=await Match.findByIdAndUpdate(s,{isBettingEnabled:a},{new:!0});if(!r)return t.status(404).json({message:"Match not found"});t.status(200).json({message:"Betting has been "+(a?"enabled":"disabled"),match:r})}catch(e){console.error("Toggle betting error:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.getEventSummary=async(e,t)=>{try{const e=await Match.countDocuments(),s=await Match.countDocuments({time:{$lte:currentISTTime}}),a=e-s,r=await Sport.aggregate([{$group:{_id:null,total:{$sum:"$marketCount"}}}]),o=r[0]?.total||0,n=(await Match.distinct("providerId")).length;return t.status(200).json({message:"Event summary fetched successfully",data:{totalEvents:e,liveEvents:s,upcomingEvents:a,activeMarkets:o,providers:n}})}catch(e){return console.error("Error in event summary:",e.message),t.status(500).json({message:"Failed to fetch event summary",error:e.message})}},exports.getAllMatchesBySportId=async(e,t)=>{try{const s=e.params.sportId,a={};s&&(a.sportId=s);const r=await Match.find(a).lean(),o={today:[],tomorrow:[],dayAfterTomorrow:[],upcoming:[]},n=moment().tz("Asia/Kolkata"),i=n.clone().startOf("day"),d=i.clone().add(1,"day"),m=i.clone().add(2,"day"),c=e=>{let t;return t="string"==typeof e&&/^\d+$/.test(e)?moment.tz(parseInt(e),"Asia/Kolkata"):moment.tz(e,"Asia/Kolkata"),t.isValid()&&t.isSameOrAfter(n)};for(const e of r){const t=e.event_date;if(!t)continue;let s;if(s="string"==typeof t&&/^\d+$/.test(t)?moment.tz(parseInt(t),"Asia/Kolkata"):moment.tz(t,"Asia/Kolkata"),!s.isValid())continue;const a=s.clone().startOf("day"),r={...e,isInPlay:c(t)};a.isSame(i)?o.today.push(r):a.isSame(d)?o.tomorrow.push(r):a.isSame(m)?o.dayAfterTomorrow.push(r):a.isAfter(m)&&o.upcoming.push(r)}const p=(e,t)=>Number(t.event_date)-Number(e.event_date),u=e=>{const t=e.filter((e=>e.isInPlay)),s=e.filter((e=>!e.isInPlay));return[...t.sort(p),...s.sort(p)]};t.status(200).json({groupedMatches:{today:u(o.today),tomorrow:u(o.tomorrow),dayAfterTomorrow:u(o.dayAfterTomorrow),upcoming:u(o.upcoming)}})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.syncPremiumEvent=async(e,t)=>{try{const{sportId:s,eventId:a}=e.body;if(!s||!a)return t.status(400).json({message:"sportId and eventId are required"});const r=await axios.post("https://apidiamond.online/sports/api/v1/feed/betfair-market-in-sr",{sportId:s,eventId:a},{headers:{"Content-Type":"application/json"}});if(!r)return t.status(400).json({message:"Invalid or missing data from external API",data:r});const o=await PremiumEvent.findOneAndUpdate({eventId:a},{$set:{sportId:s,eventId:a,jsonData:r}},{new:!0,upsert:!0});t.status(200).json({message:o.createdAt?.getTime()===o.updatedAt?.getTime()?"Inserted new premium event":"Updated existing premium event",_id:o._id,data:r})}catch(e){console.error("Premium sync error:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.getPremiumEventByEventId=async(e,t)=>{try{const{eventId:s}=e.params;if(!s)return t.status(400).json({message:"eventId is required"});const a=await PremiumEvent.findOne({eventId:s});if(!a)return t.status(404).json({message:"Premium event not found"});t.status(200).json({message:"Premium event found",data:a})}catch(e){console.error("Error fetching premium event:",e.message),t.status(500).json({message:"Server error",error:e.message})}};