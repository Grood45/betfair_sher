// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios");exports.syncAllMatches=async(e,t)=>{try{const e=await Sport.find({externalId:{$ne:null}}).select("_id externalId");if(!e||0===e.length)return t.status(404).json({message:"No sports found with externalId"});let s=0,a=0;for(const t of e){const e=t.externalId;try{const r=await axios.get(`https://zplay1.in/pb/api/v1/events/matches/${e}`),n=r.data?.data;if(!Array.isArray(n)){console.warn(`Invalid match data for sportId ${e}`);continue}const o=n.filter((e=>e.event_id)),i=await Match.find({eventId:{$in:o.map((e=>e.event_id))}}).select("eventId"),c=new Set(i.map((e=>e.eventId))),d=o.filter((e=>!c.has(e.event_id))).map((s=>({...s,eventId:s.event_id,sport_id:e,sportId:t._id})));d.length>0&&await Match.insertMany(d),s+=d.length,a+=c.size}catch(t){console.error(`Failed syncing sportId ${e}:`,t.message);continue}}return t.status(200).json({message:"Sync completed",totalInserted:s,totalSkipped:a})}catch(e){console.error("Sync error:",e.message),t.status(500).json({message:"Failed to sync matches for all sports",error:e.message})}},exports.getMatchesBySportId=async(e,t)=>{try{const{sportId:s}=e.params,a=await Match.find({sportId:parseInt(s)}).sort({startTime:1});t.status(200).json(a)}catch(e){t.status(500).json({message:"Error fetching matches",error:e.message})}},exports.getAllMatches=async(e,t)=>{try{const s=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||20,r=(s-1)*a,n=await Match.find().sort({_id:1}).skip(r).limit(a),o=await Match.countDocuments();t.status(200).json({page:s,limit:a,total:o,totalPages:Math.ceil(o/a),matches:n})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.toggleBetting=async(e,t)=>{try{const{id:s}=e.params,{isBettingEnabled:a}=e.body;if("boolean"!=typeof a)return t.status(400).json({message:"isBettingEnabled must be true or false"});const r=await Match.findByIdAndUpdate(s,{isBettingEnabled:a},{new:!0});if(!r)return t.status(404).json({message:"Match not found"});t.status(200).json({message:"Betting has been "+(a?"enabled":"disabled"),match:r})}catch(e){console.error("Toggle betting error:",e.message),t.status(500).json({message:"Server error",error:e.message})}};