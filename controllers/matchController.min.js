// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios");exports.syncAllMatches=async(t,e)=>{try{const t=await Sport.find({betfairEventTypeId:{$ne:null}}).select("_id betfairEventTypeId");if(!t||0===t.length)return e.status(404).json({message:"No sports found with betfairEventTypeId"});let s=0,a=0;for(const e of t){const t=e.betfairEventTypeId,r=`https://apidiamond.online/sports/api/final-sport-list/${t}/false`;try{const n=await axios.get(r),o=n.data?.sports||n.data?.data;if(!Array.isArray(o)){console.warn(`Invalid match data for sportId ${t}`),console.log("Raw response:",n.data);continue}const i=o.filter((t=>t.event_id)),c=await Match.find({eventId:{$in:i.map((t=>t.event_id))}}).select("eventId"),l=new Set(c.map((t=>t.eventId))),d=i.filter((t=>!l.has(t.event_id))).map((s=>({...s,eventId:s.event_id,sport_id:t,sportId:e._id})));d.length>0&&await Match.insertMany(d),s+=d.length,a+=l.size}catch(e){console.error(`Failed syncing sportId ${t}:`,e.message);continue}}return e.status(200).json({message:"Sync completed",totalInserted:s,totalSkipped:a})}catch(t){console.error("Sync error:",t.message),e.status(500).json({message:"Failed to sync matches for all sports",error:t.message})}},exports.getMatchesBySportId=async(t,e)=>{try{const{sportId:s}=t.params,a=await Match.find({sportId:parseInt(s)}).sort({startTime:1});e.status(200).json(a)}catch(t){e.status(500).json({message:"Error fetching matches",error:t.message})}},exports.getAllMatches=async(t,e)=>{try{const s=parseInt(t.query.page)||1,a=parseInt(t.query.limit)||20,r=(s-1)*a,n=await Match.find().sort({_id:1}).skip(r).limit(a),o=await Match.countDocuments();e.status(200).json({page:s,limit:a,total:o,totalPages:Math.ceil(o/a),matches:n})}catch(t){e.status(500).json({message:"Failed to fetch matches",error:t.message})}},exports.toggleBetting=async(t,e)=>{try{const{id:s}=t.params,{isBettingEnabled:a}=t.body;if("boolean"!=typeof a)return e.status(400).json({message:"isBettingEnabled must be true or false"});const r=await Match.findByIdAndUpdate(s,{isBettingEnabled:a},{new:!0});if(!r)return e.status(404).json({message:"Match not found"});e.status(200).json({message:"Betting has been "+(a?"enabled":"disabled"),match:r})}catch(t){console.error("Toggle betting error:",t.message),e.status(500).json({message:"Server error",error:t.message})}},exports.getEventSummary=async(t,e)=>{try{const t=await Match.countDocuments(),s=await Match.countDocuments({$or:[{isMatchLive:!0},{inplay:!0}]}),a=t-s,r=await Match.countDocuments({market_internal_id:{$ne:null}}),n=(await Match.distinct("providerId")).length;return e.status(200).json({message:"Event summary fetched successfully",data:{totalEvents:t,liveEvents:s,upcomingEvents:a,activeMarkets:r,providers:n}})}catch(t){return console.error("Error in event summary:",t.message),e.status(500).json({message:"Failed to fetch event summary",error:t.message})}},exports.getAllMatchesBySportId=async(t,e)=>{try{const s=parseInt(t.query.page)||1,a=parseInt(t.query.limit)||20,r=t.params.sportId;console.log(r);const n=(s-1)*a,o={};r&&(o.sportId=r);const i=await Match.find(o).sort({_id:1}).skip(n).limit(a),c=await Match.countDocuments(o);e.status(200).json({page:s,limit:a,total:c,totalPages:Math.ceil(c/a),matches:i})}catch(t){e.status(500).json({message:"Failed to fetch matches",error:t.message})}};