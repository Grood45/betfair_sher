// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios"),moment=require("moment-timezone"),deepEqual=require("fast-deep-equal"),PremiumEvent=require("../models/PremiumEvent"),currentISTTime=moment().tz("Asia/Kolkata").toDate();exports.syncAllMatches=async(e,t)=>{try{const e=await Sport.find({betfairEventTypeId:{$ne:null}}).select("_id betfairEventTypeId");if(!e||0===e.length)return t.status(404).json({message:"No sports found with betfairEventTypeId"});let s=0,a=0,r=0;for(const t of e){const e=t.betfairEventTypeId,n=`https://apidiamond.online/sports/api/final-event-sport-list/${e}`;try{const o=await axios.get(n),i=o.data?.sports||o.data?.result;if(!Array.isArray(i)){console.warn(`Invalid match data for sportId ${e}`),console.log("Raw response:",o.data);continue}for(const n of i){if(!n.eventId)continue;const o=await Match.findOne({eventId:n.eventId}),i={...n,eventId:n.eventId,sport_id:e,sportId:t._id};if(o){const e=JSON.parse(JSON.stringify(i)),t=JSON.parse(JSON.stringify(o.toObject()));deepEqual(t,e)?r++:(await Match.updateOne({eventId:n.eventId},i),a++)}else await Match.create(i),s++}}catch(t){console.error(`Failed syncing sportId ${e} :`,t.message);continue}}return t.status(200).json({message:"Sync completed",totalInserted:s,totalUpdated:a,totalSkipped:r})}catch(e){console.error("Sync error:",e.message),t.status(500).json({message:"Failed to sync matches for all sports",error:e.message})}},exports.getMatchesBySportId=async(e,t)=>{try{const{sportId:s}=e.params,a=await Match.find({sportId:parseInt(s)}).sort({startTime:1});t.status(200).json(a)}catch(e){t.status(500).json({message:"Error fetching matches",error:e.message})}},exports.getAllMatches=async(e,t)=>{try{const s=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||20,r=(s-1)*a,n=await Match.find().sort({_id:1}).skip(r).limit(a),o=await Match.countDocuments();t.status(200).json({page:s,limit:a,total:o,totalPages:Math.ceil(o/a),matches:n})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.toggleBetting=async(e,t)=>{try{const{id:s}=e.params,{isBettingEnabled:a}=e.body;if("boolean"!=typeof a)return t.status(400).json({message:"isBettingEnabled must be true or false"});const r=await Match.findByIdAndUpdate(s,{isBettingEnabled:a},{new:!0});if(!r)return t.status(404).json({message:"Match not found"});t.status(200).json({message:"Betting has been "+(a?"enabled":"disabled"),match:r})}catch(e){console.error("Toggle betting error:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.getEventSummary=async(e,t)=>{try{const e=await Match.countDocuments(),s=await Match.countDocuments({time:{$lte:currentISTTime}}),a=e-s,r=await Sport.aggregate([{$group:{_id:null,total:{$sum:"$marketCount"}}}]),n=r[0]?.total||0,o=(await Match.distinct("providerId")).length;return t.status(200).json({message:"Event summary fetched successfully",data:{totalEvents:e,liveEvents:s,upcomingEvents:a,activeMarkets:n,providers:o}})}catch(e){return console.error("Error in event summary:",e.message),t.status(500).json({message:"Failed to fetch event summary",error:e.message})}},exports.getAllMatchesBySportId=async(e,t)=>{try{const s=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||20,r=e.params.sportId;console.log(r);const n=(s-1)*a,o={};r&&(o.sportId=r);const i=await Match.find(o).sort({_id:1}).skip(n).limit(a),c=await Match.countDocuments(o);t.status(200).json({page:s,limit:a,total:c,totalPages:Math.ceil(c/a),matches:i})}catch(e){t.status(500).json({message:"Failed to fetch matches",error:e.message})}},exports.syncPremiumEvent=async(e,t)=>{try{const{sportId:s,eventId:a}=e.params;if(!s||!a)return t.status(400).json({message:"sportId and eventId are required"});const{data:r}=await axios.post("https://apidiamond.online/sports/api/v1/feed/betfair-market-in-sr",{sportId:s,eventId:a},{headers:{"Content-Type":"application/json"}});if(!r||0!==r.errorCode||!r.eventId)return t.status(400).json({message:"Invalid or missing data from external API",data:r});const n=await PremiumEvent.findOneAndUpdate({eventId:r.eventId},{$set:r},{new:!0,upsert:!0});t.status(200).json({message:n.createdAt?.getTime()===n.updatedAt?.getTime()?"Inserted new premium event":"Updated existing premium event",_id:n._id,eventId:n.eventId})}catch(e){console.error("Premium sync error:",e.message),t.status(500).json({message:"Server error",error:e.message})}},exports.getPremiumEventByEventId=async(e,t)=>{try{const{eventId:s}=e.params;if(!s)return t.status(400).json({message:"eventId is required"});const a=await PremiumEvent.findOne({eventId:s});if(!a)return t.status(404).json({message:"Premium event not found"});t.status(200).json({message:"Premium event found",data:a})}catch(e){console.error("Error fetching premium event:",e.message),t.status(500).json({message:"Server error",error:e.message})}};