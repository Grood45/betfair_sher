// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Sport=require("../models/Sport"),Match=require("../models/Match"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),fs=require("fs"),path=require("path"),axios=require("axios"),moment=require("moment-timezone"),deepEqual=require("fast-deep-equal"),currentISTTime=moment().tz("Asia/Kolkata").toDate();exports.syncAllMatches=async(t,e)=>{try{const t=await Sport.find({betfairEventTypeId:{$ne:null}}).select("_id betfairEventTypeId");if(!t||0===t.length)return e.status(404).json({message:"No sports found with betfairEventTypeId"});let s=0,a=0,r=0;for(const e of t){const t=e.betfairEventTypeId;for(const o of[1,0]){const n=`https://apidiamond.online/sports/api/v1/listGames/${t}/${o}`;try{const i=await axios.get(n),c=i.data?.result||i.data?.data;if(!Array.isArray(c)){console.warn(`Invalid match data for sportId ${t}, inPlay=${o}`),console.log("Raw response:",i.data);continue}for(const n of c){if(!n.eventId)continue;const i=await Match.findOne({eventId:n.eventId}),c={...n,eventId:n.eventId,betfair_event_id:n.eventId,sport_id:t,sportId:e._id,is_in_play:o.toString()};if(i){const t=JSON.parse(JSON.stringify(c)),e=JSON.parse(JSON.stringify(i.toObject()));deepEqual(e,t)?r++:(await Match.updateOne({eventId:n.eventId},c),a++)}else await Match.create(c),s++}}catch(e){console.error(`Failed syncing sportId ${t} (inPlay=${o}):`,e.message);continue}}}return e.status(200).json({message:"Sync completed",totalInserted:s,totalUpdated:a,totalSkipped:r})}catch(t){console.error("Sync error:",t.message),e.status(500).json({message:"Failed to sync matches for all sports",error:t.message})}},exports.getMatchesBySportId=async(t,e)=>{try{const{sportId:s}=t.params,a=await Match.find({sportId:parseInt(s)}).sort({startTime:1});e.status(200).json(a)}catch(t){e.status(500).json({message:"Error fetching matches",error:t.message})}},exports.getAllMatches=async(t,e)=>{try{const s=parseInt(t.query.page)||1,a=parseInt(t.query.limit)||20,r=(s-1)*a,o=await Match.find().sort({_id:1}).skip(r).limit(a),n=await Match.countDocuments();e.status(200).json({page:s,limit:a,total:n,totalPages:Math.ceil(n/a),matches:o})}catch(t){e.status(500).json({message:"Failed to fetch matches",error:t.message})}},exports.toggleBetting=async(t,e)=>{try{const{id:s}=t.params,{isBettingEnabled:a}=t.body;if("boolean"!=typeof a)return e.status(400).json({message:"isBettingEnabled must be true or false"});const r=await Match.findByIdAndUpdate(s,{isBettingEnabled:a},{new:!0});if(!r)return e.status(404).json({message:"Match not found"});e.status(200).json({message:"Betting has been "+(a?"enabled":"disabled"),match:r})}catch(t){console.error("Toggle betting error:",t.message),e.status(500).json({message:"Server error",error:t.message})}},exports.getEventSummary=async(t,e)=>{try{const t=await Match.countDocuments(),s=await Match.countDocuments({time:{$lte:currentISTTime}}),a=t-s,r=await Sport.aggregate([{$group:{_id:null,total:{$sum:"$marketCount"}}}]),o=r[0]?.total||0,n=(await Match.distinct("providerId")).length;return e.status(200).json({message:"Event summary fetched successfully",data:{totalEvents:t,liveEvents:s,upcomingEvents:a,activeMarkets:o,providers:n}})}catch(t){return console.error("Error in event summary:",t.message),e.status(500).json({message:"Failed to fetch event summary",error:t.message})}},exports.getAllMatchesBySportId=async(t,e)=>{try{const s=parseInt(t.query.page)||1,a=parseInt(t.query.limit)||20,r=t.params.sportId;console.log(r);const o=(s-1)*a,n={};r&&(n.sportId=r);const i=await Match.find(n).sort({_id:1}).skip(o).limit(a),c=await Match.countDocuments(n);e.status(200).json({page:s,limit:a,total:c,totalPages:Math.ceil(c/a),matches:i})}catch(t){e.status(500).json({message:"Failed to fetch matches",error:t.message})}};