// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),User=require("../models/User"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),cookieOptions={httpOnly:!0,secure:!0,sameSite:"Strict"};exports.create=async(e,s)=>{const{username:r,password:o,name:n,mobile:t,role:a}=e.body;try{if(await User.findOne({username:r}))return s.status(400).json({error:"Username already exists"});const e=await bcrypt.hash(o,10),c=new User({username:r,password:e,name:n||null,mobile:t||null,role:a||"user",status:1});await c.save();const i=generateAccessToken({id:c._id}),u=generateRefreshToken({id:c._id});s.cookie("accessToken",i,{...cookieOptions,maxAge:9e5}),s.cookie("refreshToken",u,{...cookieOptions,maxAge:6048e5}),s.status(201).json({message:"Signup successful",username:c.username,role:c.role,accessToken:i,refreshToken:u})}catch(e){console.error(e),s.status(500).json({error:"Internal Server Error"})}};