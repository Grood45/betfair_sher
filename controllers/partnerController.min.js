// @ts-nocheck
const bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),Partner=require("../models/Partner"),User=require("../models/User"),{generateAccessToken:generateAccessToken,generateRefreshToken:generateRefreshToken}=require("../config/jwt"),cookieOptions={httpOnly:!0,secure:!0,sameSite:"Strict"};exports.create=async(r,e)=>{try{const{partnerName:t,contactPerson:s,email:a,phone:n,websiteDomain:o,commissionPercent:i,startDate:c,endDate:d,status:u,callbackUrls:l,endpoints:m,notes:p,password:w,creatorId:y}=r.body,g=await bcrypt.hash(w,10);if(await Partner.findOne({$or:[{email:a},{phone:n},{websiteDomain:o}]}))return e.status(400).json({error:"A partner with the same email, phone, or website domain already exists."});const f=new Partner({partnerName:t,contactPerson:s,email:a,phone:n,websiteDomain:o,commissionPercent:i,startDate:new Date(c),endDate:d?new Date(d):null,status:u,callbackUrls:l,endpoints:m,notes:p,creatorId:y});await f.save();const P=new User({username:a,mobile:n,password:g,role:"partner",creatorId:y});await P.save(),e.status(201).json({message:"Partner created successfully",data:f})}catch(r){console.error("Error creating partner:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.getPartnerById=async(r,e)=>{try{const{id:t}=r.params,s=await Partner.findById(t);if(!s)return e.status(404).json({error:"Partner not found"});e.status(200).json({data:s})}catch(r){console.error("Error fetching partner by ID:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.getAllPartners=async(r,e)=>{try{const r=await Partner.find().sort({createdAt:-1});e.status(200).json({data:r})}catch(r){console.error("Error fetching partners:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.updatePartner=async(r,e)=>{try{const{id:t}=r.params,s=r.body;if(s.email||s.phone||s.websiteDomain){if(await Partner.findOne({_id:{$ne:t},$or:[{email:s.email},{phone:s.phone},{websiteDomain:s.websiteDomain}]}))return e.status(400).json({error:"Another partner with the same email, phone, or website domain already exists."})}s.startDate&&(s.startDate=new Date(s.startDate)),s.endDate&&(s.endDate=new Date(s.endDate));const a=await Partner.findByIdAndUpdate(t,s,{new:!0,runValidators:!0});if(!a)return e.status(404).json({error:"Partner not found"});e.status(200).json({message:"Partner updated successfully",data:a})}catch(r){console.error("Error updating partner:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.deletePartner=async(r,e)=>{try{const{id:t}=r.params;if(!await Partner.findByIdAndDelete(t))return e.status(404).json({error:"Partner not found"});e.status(200).json({message:"Partner deleted successfully"})}catch(r){console.error("Error deleting partner:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.setPartnerStatus=async(r,e)=>{try{const{id:t}=r.params,{status:s}=r.body;if(!["active","inactive","suspended"].includes(s))return e.status(400).json({error:"Invalid status value"});const a=await Partner.findByIdAndUpdate(t,{status:s},{new:!0});if(!a)return e.status(404).json({error:"Partner not found"});e.status(200).json({message:`Partner status updated to ${s}`,data:a})}catch(r){console.error("Error updating partner status:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}},exports.changePassword=async(r,e)=>{try{const{id:t}=r.params,{password:s,confirmPassword:a}=r.body;if(!s||!a)return e.status(400).json({error:"Password and confirm password are required"});if(s!==a)return e.status(400).json({error:"Passwords do not match"});const n=await Partner.findById(t);if(!n)return e.status(404).json({error:"Partner not found"});const o=await bcrypt.genSalt(10);n.password=await bcrypt.hash(s,o),await n.save(),e.status(200).json({message:"Password updated successfully"})}catch(r){console.error("Error changing password:",r),e.status(500).json({error:"Internal Server Error",msg:r.message})}};